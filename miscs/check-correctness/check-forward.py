#! /bin/python3

import numpy as np
from scipy.linalg import fractional_matrix_power


# Set these properly ;)
num_vertices = 4039
num_features = 6
feat_file = "features"                  # Put them under the same directory `check/`.
snap_file = "facebook_combined.txt"


# Weights generated by the weightserver
weights = [
    np.array([
        [-1.29132,  -1.17642,  0.960311,  -0.0528824],
        [-0.794382, -1.17226,  -1.10235,  0.748811],
        [0.259365,  0.151377,  0.199394,  0.218145],
        [0.359989,  -0.669245, -0.998963, 1.42596],
        [-0.972823, -0.235563, 0.894912,  -1.21858],
        [0.346023,  -1.3924,   0.973205,  0.658695]
    ]),
    np.array([
        [0.693969,  -0.471074],
        [-0.348153, -1.40479],
        [-0.293149, -0.95399],
        [1.29462,   -0.25147]
    ])
]


# Read in initial features
input_feats = np.empty(shape=[0, num_features], dtype=float)
with open(feat_file, "r") as ffeats:
    for line in ffeats.readlines():
        if len(line.strip()) > 0:
            feat_values = [float(val) for val in line.strip().split()]
            assert(len(feat_values) == num_features)
            input_feats = np.append(input_feats, [feat_values], axis=0)


# Read in the graph and construct adjancency and degree matrix
adj_mat = np.identity(num_vertices)
deg_mat = np.identity(num_vertices)
with open(snap_file, "r") as fgraph:
    for line in fgraph.readlines():
        if len(line.strip()) > 0:
            vsrc, vdst = tuple([int(num) for num in line.strip().split()])
            assert(0 <= vsrc < num_vertices and 0 <= vdst < num_vertices)
            adj_mat[vdst, vsrc] = 1
            deg_mat[vdst, vdst] += 1


def activate(mat):
    return np.tanh(mat)


normed_deg_mat = fractional_matrix_power(deg_mat, -0.5)
S_mat = np.dot(normed_deg_mat, np.dot(adj_mat, normed_deg_mat))

activation_mat1 = activate(np.dot(S_mat, np.dot(input_feats    , weights[0])))
activation_mat2 = activate(np.dot(S_mat, np.dot(activation_mat1, weights[1])))

print("Activation_mats: ")
print(activation_mat1)
print(activation_mat2)
