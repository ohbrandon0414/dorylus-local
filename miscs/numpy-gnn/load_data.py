import numpy as np


def load_data(base_dir):
    print("Loading data...")
    feat_file = base_dir + "cora.features"
    label_file = base_dir + "cora.labels"
    graph_file = base_dir + "cora.graph"

    # Read in initial features.
    input_feats = np.genfromtxt(feat_file, delimiter=',', dtype=float)
    # print(input_feats)

    num_vertices = input_feats.shape[0]

    # Read in target lables one-hot representation.
    target_labels = np.genfromtxt(label_file, dtype=int)

    # Read in the graph and construct adjancency and degree matrix.
    edge_list = np.genfromtxt(graph_file, dtype=int)
    # Construct Adjacent Matrix with self-loop
    adj_mat = np.identity(num_vertices)
    for edge in edge_list:
        adj_mat[edge[0]][edge[1]] = 1

    normed_deg_vec = 1 / np.sqrt(np.sum(adj_mat, axis=0, keepdims=True))
    # Normalized A_hat matrix
    A_hat = normed_deg_vec * adj_mat * normed_deg_vec.T

    print("Data Loaded. Adj Mat: " + str(A_hat.shape) + ", Feats: " +
          str(input_feats.shape))

    return A_hat, input_feats, target_labels


def load_weights(weights_file, layer_config):
    ''' Under construction. For loading weights and checking correctness '''
    # Weights generated by the weightserver.
    weights = [np.empty(shape=(layer_config[0], layer_config[1]), dtype=float),
               np.empty(shape=(layer_config[1], layer_config[2]), dtype=float),
               np.empty(shape=(layer_config[0], layer_config[1]), dtype=float),
               np.empty(shape=(layer_config[1], layer_config[2]), dtype=float)]
    with open(weights_file, "r") as fweights:
        mat_cnt, row_idx = -1, 0
        for line in fweights.readlines():
            line = line.strip()
            if line == "Matrix Dims: ({}, {})".format(layer_config[0], layer_config[1]):
                mat_cnt += 1
                row_idx = 0
            elif line == "Matrix Dims: ({}, {})".format(layer_config[1], layer_config[2]):
                mat_cnt += 1
                row_idx = 0
            elif line[:2] == "U:":
                continue
            elif len(line) > 0:
                weights[mat_cnt][row_idx] = list(map(float, line.split()))
                row_idx += 1
    # print(weights[0])
    # print(weights[1])
