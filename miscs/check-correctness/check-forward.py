#! /bin/python3

import numpy as np
from scipy.linalg import fractional_matrix_power


# Set these properly ;)
num_vertices = 1000
num_features = 6
feat_file = "../../../data/small/features"
snap_file = "../../../data/small/small.graph"


# Weights generated by the weightserver
weights = [
    np.array([
        [-1.29132, -1.17642, 0.960311, -0.0528824, -0.794382, -1.17226, -1.10235, 0.748811, 0.259365, 0.151377],
        [0.199394, 0.218145, 0.359989, -0.669245, -0.998963, 1.42596, -0.972823, -0.235563, 0.894912, -1.21858],
        [0.346023, -1.3924, 0.973205, 0.658695, 0.693969, -0.471074, -0.348153, -1.40479, -0.293149, -0.95399],
        [1.29462, -0.25147, 0.546623, 1.09379, -0.612629, -0.462595, 1.17477, 1.4292, -0.479152, -1.10968],
        [0.544846, 1.22083, -1.48307, 0.979984, 0.591277, -1.40362, 1.40812, -0.669124, 1.03855, 0.97372],
        [0.316757, -1.26022, -0.4825, -0.38401, -1.05859, 1.24799, -1.0005, -0.392775, -1.37518, -0.61277]
    ]),
    np.array([
        [0.170054, -0.901535, 0.908919, 0.194343],
        [-0.674725, -0.105672, -0.0228593, -0.198091],
        [0.685961, -0.0546585, -0.646025, -0.733765],
        [0.609123, -1.47173, -0.315495, 1.48348],
        [-0.210511, -1.06066, -0.483713, 0.234035],
        [0.420494, -0.757625, -1.40361, 1.47215],
        [1.44152, -0.354305, 0.190449, -0.114473],
        [-0.955115, 0.389505, 0.408238, 0.265304],
        [0.970574, 1.43, 0.952564, -1.24768],
        [0.221666, -0.46031, 0.575747, -1.41797]
    ])
]


# Read in initial features
input_feats = np.empty(shape=[0, num_features], dtype=float)
with open(feat_file, "r") as ffeats:
    for line in ffeats.readlines():
        if len(line.strip()) > 0:
            feat_values = [float(val) for val in line.strip().split(',')]
            assert(len(feat_values) == num_features)
            input_feats = np.append(input_feats, [feat_values], axis=0)


# Read in the graph and construct adjancency and degree matrix
adj_mat = np.identity(num_vertices)
deg_mat = np.identity(num_vertices)
with open(snap_file, "r") as fgraph:
    for line in fgraph.readlines():
        if len(line.strip()) > 0:
            vsrc, vdst = tuple([int(num) for num in line.strip().split()])
            assert(0 <= vsrc < num_vertices and 0 <= vdst < num_vertices)
            adj_mat[vdst, vsrc] = 1
            deg_mat[vdst, vdst] += 1


def activate(mat):
    return np.tanh(mat)


normed_deg_mat = fractional_matrix_power(deg_mat, -0.5)
S_mat = np.dot(normed_deg_mat, np.dot(adj_mat, normed_deg_mat))

activation_mat1 = activate(np.dot(S_mat, np.dot(input_feats    , weights[0])))
activation_mat2 = activate(np.dot(S_mat, np.dot(activation_mat1, weights[1])))

print("Activation_mats: ")
print(input_feats)
print(activation_mat1)
print(activation_mat2)
